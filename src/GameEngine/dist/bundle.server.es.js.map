{"version":3,"file":"bundle.server.es.js","sources":["../src/Helpers/Commands.ts","../src/Core/Plugin.ts","../src/Core/GameEvent.ts","../src/Core/PluginOrder.ts","../src/Plugins/Keyboard.ts","../src/Plugins/Hud/Profiler.ts","../src/Core/GameWorld.ts","../src/Helpers/Color.ts","../src/Plugins/CliPlugin.ts","../src/Core/Component.ts","../src/Helpers/Math.ts","../src/Helpers/Vector.ts","../src/Components/Collider.ts","../node_modules/flatqueue/index.js","../node_modules/flatbush/index.js","../src/Plugins/CollisionDetection.ts","../src/Plugins/Config.ts","../src/Components/RigidBody.ts","../src/Plugins/Physics.ts","../src/Plugins/Scheduler.ts","../src/Plugins/Server.ts","../src/Components/StandaloneComponent.ts","../src/Plugins/StandaloneComponent.ts","../src/Server/main.ts"],"sourcesContent":["export class CommandResult {\r\n    public status: boolean;\r\n    public message: string;\r\n    public data: any;\r\n    constructor(status: boolean, message: string, data: any) {\r\n        this.status = status;\r\n        this.message = message;\r\n        this.data = data;\r\n    }\r\n}\r\n\r\nexport function cli(name?: string, argsSyntax?: string, returnType?: string): (target: any, propertyKey: string, descriptor: TypedPropertyDescriptor<(...args: any[]) => CommandResult>) => void {\r\n    return function (target: any, propertyKey: string, descriptor: TypedPropertyDescriptor<(...args: any[]) => CommandResult>): void {\r\n        const originalMethod = descriptor.value;\r\n        if (originalMethod) {\r\n            name = name??propertyKey;\r\n            returnType = returnType??\"void\";\r\n            argsSyntax = argsSyntax??\"\";\r\n            if (argsSyntax)\r\n                argsSyntax = \" \" + argsSyntax;\r\n            if (returnType)\r\n                returnType = \": \" + returnType;\r\n\r\n            argsSyntax = name+argsSyntax+returnType; \r\n            const ctor = target.constructor;\r\n            if (!Object.prototype.hasOwnProperty.call(ctor, \"commands\")) {\r\n                ctor.commands = Object.assign({}, ctor.commands || {});\r\n            }\r\n            ctor.commands[name] = originalMethod;\r\n            \r\n            if (!Object.prototype.hasOwnProperty.call(ctor, \"syntaxes\")) {\r\n                ctor.syntaxes = Object.assign({}, ctor.syntaxes || {});\r\n            }\r\n            // console.log(\"Adding syntax:\", argsSyntax);\r\n            ctor.syntaxes[name] = argsSyntax;\r\n        }\r\n    };\r\n}\r\n\r\n// export function gameCommand(\r\n//     target: any, \r\n//     propertyKey: string, \r\n//     descriptor: TypedPropertyDescriptor<(...args: any[]) => CommandResult>,\r\n// ): void {\r\n//     // console.log(target);\r\n\r\n\r\n//     const originalMethod = descriptor.value;\r\n//     if (originalMethod) {\r\n//         const ctor = target.constructor;\r\n//         if (!Object.prototype.hasOwnProperty.call(ctor, \"commands\")) {\r\n//             ctor.commands = Object.assign({}, ctor.commands || {});\r\n//         }\r\n//         ctor.commands[propertyKey] = descriptor.value;\r\n//     }\r\n// }\r\n\r\nexport function cliPlugin(name: string): (target: any) => void {\r\n    return function (target: any): void {\r\n        target.prototype.cliGetName = function (): string { return name; };\r\n    };\r\n}","import { GameWorld } from \"../Core/GameWorld\";\r\nimport { EventArgs, ISubscriber } from \"./GameEvent\";\r\nimport { cli, CommandResult } from \"../Helpers/Commands\";\r\nimport { PluginOrder } from \"./PluginOrder\";\r\n\r\n\r\n//WorldComponent = Plugin\r\nexport abstract class Plugin implements ISubscriber {\r\n    protected gameWorld!: GameWorld;\r\n    protected enabled: boolean = true;\r\n    public readonly name: string = \"Plugin\";\r\n    public abstract readonly order: PluginOrder;\r\n\r\n    //overideable methods\r\n    protected event(args: EventArgs, alias?: string): void {}\r\n    protected start(): void { }\r\n    protected update(delta: number): void { }\r\n    \r\n    public getPlugin<T extends Plugin>(plugin: new (...args: any[]) => T): T{\r\n        return this.gameWorld.getPlugin(plugin);\r\n    }\r\n    public hasPlugin<T extends Plugin>(plugin: new (...args: any[]) => T): boolean{\r\n        return this.gameWorld.hasPlugin(plugin);\r\n    }\r\n\r\n    public isEnabled(): boolean{\r\n        return this.enabled;\r\n    }\r\n    public enable(value=true): void{\r\n        this.enabled=value;\r\n    }\r\n    public disable(): void {\r\n        this.enabled = false;\r\n    }\r\n\r\n\r\n    protected cliGetName(): string {\r\n        return this.name;\r\n    }\r\n    // @cli(\"help\")\r\n    // protected help(): CommandResult {\r\n    //     let message = `${this.cliGetName()} commands:\\n`;\r\n    //     for (const element of Object.values((this as any).constructor[\"syntaxes\"])) {\r\n    //         message += `/${this.cliGetName()}:${element}\\n`;\r\n    //     }\r\n    //     return new CommandResult(true, message, undefined);\r\n    // }\r\n    // @cli(\"enable\")\r\n    // private cliEnable(): CommandResult {\r\n    //     this.enabled = true;\r\n    //     return new CommandResult(true, `${this.name} enabled`, undefined);\r\n    // }\r\n    // @cli(\"disable\")\r\n    // private cliDisable(): CommandResult {\r\n    //     this.enabled = false;\r\n    //     return new CommandResult(true, `${this.name} disabled`, undefined);\r\n    // }\r\n    @cli(\"help\")\r\n    protected help(): CommandResult {\r\n        const BLUE = \"\\x1b[36m\";\r\n        const RESET = \"\\x1b[0m\";\r\n\r\n        let message = `${BLUE}${this.cliGetName()}${RESET} commands:\\n`;\r\n        for (const element of Object.values((this as any).constructor[\"syntaxes\"])) {\r\n            message += `  /${this.cliGetName()}:${element}\\n`;\r\n        }\r\n        return new CommandResult(true, message, undefined);\r\n    }\r\n\r\n    @cli(\"enable\")\r\n    private cliEnable(): CommandResult {\r\n        const GREEN = \"\\x1b[32m\";\r\n        const RESET = \"\\x1b[0m\";\r\n\r\n        this.enabled = true;\r\n        return new CommandResult(true, `${this.name} ${GREEN}enabled${RESET}`, undefined);\r\n    }\r\n\r\n    @cli(\"disable\")\r\n    private cliDisable(): CommandResult {\r\n        const RED = \"\\x1b[31m\";\r\n        const RESET = \"\\x1b[0m\";\r\n\r\n        this.enabled = false;\r\n        return new CommandResult(true, `${this.name} ${RED}disabled${RESET}`, undefined);\r\n    }\r\n}","import { GameWorld } from \"./GameWorld\";\r\n\r\nexport class EventArgs{\r\n    constructor(){}    \r\n}\r\n\r\nexport interface ISubscriber{\r\n    // event(args: EventArgs, alias?: string): void;\r\n}\r\n\r\nexport class GameEvent{\r\n    private subs: Map<WeakRef<ISubscriber>, string|undefined> = new Map();\r\n    private args: Array<EventArgs> = [];\r\n\r\n    public subscribe(sub: ISubscriber, alias?: string): void{\r\n        this.subs.set(new WeakRef(sub), alias);\r\n    }\r\n    public unsubscribe(sub: ISubscriber){\r\n        this.subs.delete(new WeakRef(sub));\r\n    }\r\n\r\n    public emit(args: EventArgs): void{\r\n        this.args.push(args);\r\n    }\r\n    public register(gameWorld: GameWorld): void{\r\n        gameWorld.registerEvent(this);\r\n    }\r\n\r\n    private invoke(): void{\r\n        if (this.args.length == 0)\r\n            return;\r\n        for (const [sub, alias] of this.subs){\r\n            const derefSub = sub.deref();\r\n            if(!derefSub){\r\n                this.subs.delete(sub);\r\n                continue;\r\n            }\r\n            for (const args of this.args)\r\n                (derefSub as any).event(args, alias);\r\n        }\r\n        this.args = [];\r\n    }\r\n}","// Input → Update → Physics → Collision → Events → Render\r\nexport enum PluginOrder {\r\n    None = -1, // no update\r\n    Input = 0,\r\n    Update = 1,\r\n    Physics = 2,\r\n    Collision = 3,\r\n    Render = 4,\r\n}","import { EventArgs, GameEvent } from \"../Core/GameEvent\";\r\nimport { Plugin } from \"../Core/Plugin\";\r\nimport { PluginOrder } from \"../Core/PluginOrder\";\r\n\r\nexport class KeyboardEventArgs extends EventArgs {\r\n    public key: string;\r\n    constructor(key: string) {\r\n        super();\r\n        this.key = key;\r\n    }\r\n}\r\n\r\nexport class KeyboardPlugin extends Plugin {\r\n    public readonly order: PluginOrder = PluginOrder.Input;\r\n    public name: string = \"KeyboardPlugin\";\r\n    public KeyDownEvent: GameEvent = new GameEvent();\r\n    public BlockedKeyDownEvent: GameEvent = new GameEvent();\r\n    public block: boolean = false;\r\n\r\n    private NowPressedKeys = new Set<string>();\r\n    private readonly pressedKeys = new Set<string>();\r\n\r\n    constructor() {\r\n        super();\r\n        this.pressedKeys = new Set();\r\n        document.onkeydown = (event: KeyboardEvent) => {\r\n            const key = event.key.toLowerCase();\r\n            this.pressedKeys.add(key);\r\n            this.NowPressedKeys.add(key);\r\n        }\r\n        document.onkeyup = (event: KeyboardEvent) => {\r\n            const key = event.key.toLowerCase();\r\n            this.pressedKeys.delete(key);\r\n        }\r\n    }\r\n    \r\n    public isPressed(key: string): boolean {\r\n        return this.isEnabled() && !this.block && this.pressedKeys.has(key);\r\n    }\r\n    protected override start(): void {\r\n        this.KeyDownEvent.register(this.gameWorld);\r\n        this.BlockedKeyDownEvent.register(this.gameWorld);\r\n    }\r\n    protected override update(delta: number): void {\r\n        this.NowPressedKeys.forEach(key => {\r\n            if (this.block)\r\n                this.BlockedKeyDownEvent.emit(new KeyboardEventArgs(key));\r\n            else\r\n                this.KeyDownEvent.emit(new KeyboardEventArgs(key));\r\n        });\r\n        this.NowPressedKeys.clear();\r\n    }\r\n}","import { Vector } from \"../../Helpers/Vector\";\r\nimport { Plugin } from \"../../Core/Plugin\";\r\nimport { RendererPlugin } from \"../Renderer\";\r\nimport { get } from \"http\";\r\nimport { KeyboardEventArgs, KeyboardPlugin } from \"../Keyboard\";\r\nimport { EventArgs } from \"../../Core/GameEvent\";\r\nimport { PluginOrder } from \"../../Core/PluginOrder\";\r\n\r\n\r\n\r\nexport class ProfilerPlugin extends Plugin {\r\n    public readonly order: PluginOrder = PluginOrder.Render;\r\n    public name: string = \"ProfilerPlugin\";\r\n    public size: number = 250;\r\n    private isVisible: boolean = true;\r\n    private profilerWrapper: HTMLDivElement = document.createElement(\"div\");\r\n    private readonly usage = new Map<string, Array<number>>();\r\n\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    override start(): void {\r\n        this.getPlugin(KeyboardPlugin).KeyDownEvent.subscribe(this, \"keydown\");\r\n        document.body.appendChild(this.profilerWrapper);\r\n        this.addRecord(\"Fps\", 0);\r\n    }\r\n\r\n    lastTime = performance.now();\r\n    frames = 0;\r\n    fpsHistory: number[] = [];\r\n    override update(delta: number): void {\r\n        const fps = 1 / delta;\r\n        this.addRecord(\"Fps\", fps);\r\n``        \r\n       \r\n        \r\n        this.frames++;\r\n        const now = performance.now();\r\n        if (now - this.lastTime >= 250) {\r\n            this.fpsHistory.push(this.frames*4);\r\n            if (this.fpsHistory.length > 100)\r\n                this.fpsHistory.shift();\r\n            this.frames = 0;\r\n            this.lastTime = now;\r\n\r\n            let i = 0;\r\n            let values: string[] = [];\r\n            for (const element of this.usage) {\r\n                let key = element[0];\r\n                let len = element[1].length;\r\n                let mean = 0;\r\n                for (const v of element[1])\r\n                    mean += v;\r\n                mean/=len;    \r\n                i++;\r\n                values.push(`${key}: `+(mean).toFixed(2).toString());\r\n            }\r\n            this.profilerWrapper.innerHTML = this.getInnerHtml(values);\r\n        }\r\n\r\n    }\r\n    \r\n    protected override event(args: EventArgs, alias?: string): void {\r\n        if (alias == \"keydown\"){\r\n            const kargs = args as KeyboardEventArgs;\r\n            if (kargs.key == \"p\")\r\n                this.isVisible = !this.isVisible;\r\n        }\r\n    }\r\n\r\n    public addRecord(key: string, value: number){\r\n        if(!this.usage.has(key)){\r\n            this.usage.set(key, [value]);\r\n        }\r\n        else {\r\n            let usage = this.usage.get(key)!; \r\n            let len = usage.length;\r\n            if (len >= this.size){\r\n                usage.shift();\r\n                usage.push(value);\r\n            }\r\n            else{\r\n                usage.push(value);\r\n            }\r\n        }\r\n    }\r\n\r\n    private getChartHtml(values: number[]): string {\r\n        values = values.slice(Math.max(0, values.length-100), values.length);\r\n        const max = 200; //Math.max(...values);\r\n        let html = `<div class=\"profiler-chart\">`;\r\n        for (let i = 0; i < values.length; i++) {\r\n            html += `<div class=\"profiler-chart-item\" style=\"height: ${values[i]/max*100}px\"></div>`;\r\n        }\r\n        html += `</div>`;\r\n        return html;\r\n    }\r\n\r\n    private getElementsHtml(values: string[]): string {\r\n        let html=\"\";\r\n        for (let i = 0; i < values.length; i++) {\r\n            if (i > 0)\r\n                html += `<hr class=\"profiler-item-separator\">`;\r\n            html += \r\n            `<div class=\"profiler-item\">\r\n                <span class=\"profiler-item-key\">${values[i].split(\": \")[0]}:</span>\r\n                <span class=\"profiler-item-value\">${values[i].split(\": \")[1]}</span>\r\n            </div>`;\r\n        }\r\n        return html;\r\n    }\r\n\r\n    private getInnerHtml(values: string[]): string {\r\n        const profiler = `\r\n            <style>\r\n                .profiler{\r\n                    ${this.isVisible ? \"\" : \"display: none;\"}\r\n                    position: fixed;\r\n                    top: 20px;\r\n                    left: 20px;\r\n                    \r\n                    width: 400px;\r\n                    padding: 20px;\r\n                    border-radius: 20px;\r\n                    background-color: rgba(42, 43, 46, 0.382);\r\n                    color: white;\r\n                    pointer-events: none;\r\n                }\r\n                .profiler-header{\r\n                    font-size: 20px;\r\n                    font-weight: bold;\r\n                    color: white;\r\n                    margin-bottom: 10px;\r\n                }\r\n                .profiler-item{\r\n                    // display: flex;\r\n                    // justify-content: space-between;\r\n                    padding: 5px 0;\r\n                    color:rgba(240, 240, 240, 0.85)\r\n                }\r\n                .profiler-item-key{\r\n                    margin-right: 10px;\r\n                }\r\n                .profiler-item-value{\r\n                    color: #f0f0f0;\r\n                }\r\n                .profiler-item-separator{\r\n                    border: none;\r\n                    border-top: 1px dashed gray;\r\n                    opacity: 0.75;\r\n                    margin: 2px 0;\r\n                }\r\n                .profiler-chart{\r\n                    display: flex;\r\n                    flex-direction: row;\r\n                    justify-content: space-between;\r\n                    align-items: flex-end;\r\n                    height: 100px;\r\n                    width: 100%;\r\n                    margin-bottom: 10px;\r\n                    border-radius: 10px;\r\n                    overflow: hidden;\r\n                    opacity: 0.25;\r\n                }\r\n                .profiler-chart-item{\r\n                    background-color: rgb(240, 240, 240);\r\n                    width: 100%;\r\n                    margin: 0;\r\n                }\r\n            </style>\r\n\r\n            <div class=\"profiler\">\r\n                <div class=\"profiler-header\">\r\n                    <h2 style=\"margin: 0\">Profiler <span style=\"opacity: 0.5\">[P]</span></h2>\r\n                </div>\r\n                ${this.getChartHtml(this.fpsHistory)}\r\n                ${this.getElementsHtml(values)}\r\n            </div>\r\n            `\r\n        return profiler;\r\n    }\r\n}","import { Component } from \"./Component\";\r\nimport { GameObject } from \"../Core/GameObject\";\r\nimport { ProfilerPlugin } from \"../Plugins/Hud/Profiler\";\r\nimport { Plugin } from \"./Plugin\";\r\nimport { GameEvent } from \"./GameEvent\";\r\n\r\nexport class GameWorld {\r\n    private startTime: number=0;\r\n    private prevWorldTime: number=0;\r\n    private worldTime: number=0;\r\n    private tickCount: number = 0;\r\n\r\n    private gameObjects: Map<string, GameObject> = new Map<string, GameObject>();\r\n    private plugins: Map<string, Plugin> = new Map<string, Plugin>();\r\n    private events: Set<WeakRef<GameEvent>> = new Set<WeakRef<GameEvent>>();\r\n    private componentsToStart: Array<WeakRef<Component>> = [];\r\n    \r\n    constructor(...plugins: Plugin[]){\r\n        plugins.sort((a, b) => a.order - b.order);\r\n        for(let plugin of plugins){\r\n            let name = plugin.constructor.name;\r\n            if (this.plugins.has(name))\r\n                throw new Error(`Plugin ${name} already exists in the game object`);\r\n                    \r\n            (plugin as any).gameWorld = this;\r\n            this.plugins.set(name, plugin);\r\n        }\r\n    }\r\n    //plugins\r\n    public tryGetPlugin<T extends Plugin>(plugin: new (...args: any[]) => T): T | undefined {\r\n        const name = plugin.name;\r\n        if (!this.plugins.has(name))\r\n            return undefined;\r\n        return this.plugins.get(name) as T;\r\n    }\r\n    public getPlugin<T extends Plugin>(plugin: new (...args: any[]) => T): T {\r\n        const name = plugin.name;\r\n        if (!this.plugins.has(name))\r\n            throw new Error(`Plugin ${name} does not exist in the game world`);\r\n        return this.plugins.get(name) as T;\r\n    }\r\n    public getPluginByName<T extends Plugin>(name: string): T {\r\n        if (!this.plugins.has(name))\r\n            throw new Error(`Plugin ${name} does not exist in the game world`);\r\n        return this.plugins.get(name) as T;\r\n    }\r\n    public getAllPlugins(): Plugin[]{\r\n        return Array.from(this.plugins.values());\r\n    }\r\n    public hasPlugin<T extends Plugin>(plugin: new (...args: any[]) => T): boolean{\r\n        const name = plugin.name;\r\n        return this.plugins.has(name);\r\n    }\r\n\r\n\r\n    //game objects\r\n    public isSpawned(gameObject: GameObject): boolean{\r\n        return  this.gameObjects.has(gameObject.getId());\r\n    }\r\n    public spawn(gameObject: GameObject): GameObject{\r\n        if (this.gameObjects.has(gameObject.getId()))\r\n            throw new Error(`GameObject ${gameObject.name} already exists in the game world`);\r\n\r\n        (gameObject as any).gameWorld = this;\r\n        this.gameObjects.set(gameObject.getId(), gameObject);\r\n\r\n        gameObject.getAllComponents().forEach(comp => this.componentsToStart.push(new WeakRef(comp)));\r\n        return gameObject;\r\n    }\r\n    public destroy(gameObject: GameObject): void{\r\n        if (!this.gameObjects.has(gameObject.getId()))\r\n            throw new Error(`GameObject ${gameObject.name} does'not exist in the game world`);\r\n        \r\n        gameObject.enabled=false;\r\n        this.gameObjects.delete(gameObject.getId());\r\n    }\r\n    public getGameObject(id: string): GameObject | undefined {\r\n        return this.gameObjects.get(id);\r\n    }\r\n    public getAllGameObjects(onlyEnabled: boolean=true): GameObject[]{\r\n        return Array.from(this.gameObjects.values()).filter(go=>go.enabled||!onlyEnabled);\r\n    }\r\n\r\n    //components\r\n    public getComponents<T extends Component>(classC: new (...args: any[]) => T, onlyEnabled: boolean=true): T[]{\r\n        return this.getAllGameObjects()\r\n        .filter(go => go.hasComponent(classC)&&(go.getComponent(classC).isEnabled()||!onlyEnabled))\r\n        .map(go => go.getComponent(classC));\r\n    }\r\n    public getAllComponents(onlyEnabled: boolean=true): Component[]{\r\n        //todo optimalization\r\n        //not optimalized\r\n        return Array.from(this.getAllGameObjects(onlyEnabled)).flatMap(go => go.getAllComponents());\r\n    }\r\n    //events\r\n    public registerEvent(event: GameEvent): void{\r\n        this.events.add(new WeakRef(event));\r\n    }\r\n    //time\r\n    public getWorldTime(): number {\r\n        return this.worldTime/1e3;\r\n    }\r\n\r\n\r\n\r\n    //flow control\r\n    public tick(): void {\r\n        this.tickCount++;\r\n        if (this.tickCount == 1) \r\n            this.startWorld();\r\n        else\r\n            this.updateWorld();\r\n\r\n        this.startComponents();\r\n        this.invokeEvents();\r\n    }\r\n    private startComponents(): void{\r\n        for (let componentRef of this.componentsToStart) {\r\n            const component = componentRef.deref();\r\n            if (component)\r\n                (component as any).start();\r\n        }\r\n        this.componentsToStart = [];\r\n    }\r\n    private startWorld(): void{\r\n        this.startTime = performance.now();\r\n        this.Start();\r\n        this.plugins.forEach(plugin => (plugin as any).start());\r\n    }\r\n    private updateWorld(): void{\r\n        this.worldTime = performance.now() - this.startTime;\r\n        const delta = this.worldTime - this.prevWorldTime;\r\n        this.prevWorldTime = this.worldTime;\r\n       \r\n        this.Update(delta / 1e3);\r\n        this.plugins.forEach(plugin => {\r\n            if (!plugin.isEnabled())\r\n                return;\r\n            let start = performance.now(); \r\n            (plugin as any).update(delta/1e3);\r\n            this.tryGetPlugin(ProfilerPlugin)?.addRecord(plugin.name, performance.now()-start);\r\n        });\r\n    }\r\n\r\n    private invokeEvents(): void{\r\n        let start = performance.now();\r\n        for (const eventRef of this.events) {\r\n            const event = eventRef.deref();\r\n            if (event)\r\n                (event as any).invoke();\r\n            else\r\n                this.events.delete(eventRef);\r\n        }\r\n        this.tryGetPlugin(ProfilerPlugin)?.addRecord(\"Events\", performance.now()-start);\r\n    }\r\n    //overridable methods\r\n    protected Start(): void { }\r\n    protected Update(delta: number): void { }\r\n}","export class rgb{\r\n    public readonly r: number = 0;\r\n    public readonly g: number = 0;\r\n    public readonly b: number = 0;\r\n    public a: number = 1;\r\n  \r\n    public static readonly stroke: rgb = new rgb(43,43,44);\r\n    // public static readonly background: rgb = new rgb(91, 93, 98);\r\n    public static readonly background: rgb = new rgb(93, 97, 95);\r\n    constructor(r: number, g:number, b: number, a: number=1) {\r\n      this.r = Math.min(255, Math.max(0, r));\r\n      this.g = Math.min(255, Math.max(0, g));\r\n      this.b = Math.min(255, Math.max(0, b));\r\n      this.a = Math.min(1, Math.max(0, a));\r\n    }\r\n    public toString(): string{\r\n      return `rgba(${this.r},${this.g},${this.b},${Math.max(0, Math.min(this.a, 1))})`;\r\n    }\r\n    public toRgb(): rgb{\r\n      return new rgb(this.r, this.g, this.b);\r\n    }\r\n    public toArgb(alpha: number){\r\n      return new rgb(this.r, this.g, this.b, alpha);\r\n    }\r\n    public blend(color: rgb, alpha: number): rgb{\r\n      return new rgb(this.r*(1-alpha)+color.r*alpha, this.g*(1-alpha)+color.g*alpha, this.b*(1-alpha)+color.b*alpha, this.a*(1-alpha)+color.a*alpha);\r\n    }\r\n    public static randomColor(): rgb{\r\n      return new rgb(Math.random()*255, Math.random()*255, Math.random()*255);\r\n    }\r\n    public static hslToRgb(h: number, s: number, l: number): rgb {\r\n      s /= 100;\r\n      l /= 100;\r\n      const k = (n: number) => (n + h / 30) % 12;\r\n      const a = s * Math.min(l, 1 - l);\r\n      const f = (n: number) =>\r\n        l - a * Math.max(-1, Math.min(k(n) - 3, Math.min(9 - k(n), 1)));\r\n      const r = Math.round(f(0) * 255);\r\n      const g = Math.round(f(8) * 255);\r\n      const b = Math.round(f(4) * 255);\r\n      \r\n      return new rgb(r, g, b);\r\n    }\r\n    public static randomColor2(): rgb {\r\n      const hue = Math.floor(Math.random() * 360);\r\n      const saturation = Math.floor(Math.random() * 30) + 15;\r\n      const lightness = Math.floor(Math.random() * 20) + 30;\r\n    \r\n      return rgb.hslToRgb(hue, saturation, lightness);\r\n    }\r\n    public static getHeatmapColor(value: number): rgb {\r\n        value = Math.max(0, Math.min(1, value));\r\n        let g = Math.min(255, Math.max(0, Math.floor(255 * value * 2)));\r\n        let r = Math.min(255, Math.max(0, Math.floor(255 * (2 - value * 2))));\r\n        return new rgb(r/1.5, g/1.5, 0, 255);\r\n    }\r\n    \r\n    public static tryParseCssColor(color: string): rgb | undefined{\r\n      let tempElem = document.body;\r\n      let lastColor = tempElem.style.color;\r\n      tempElem.style.color = color;\r\n      let computedColor = getComputedStyle(tempElem).color;\r\n      tempElem.style.color = lastColor;\r\n      return this.getRgbFromComputedStyle(computedColor);\r\n    }\r\n  \r\n    private static getRgbFromComputedStyle(style: string): rgb | undefined {\r\n      let match = style.match(/^rgb(a?)\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*([\\d.]+))?\\)$/);\r\n      if (!match) return undefined;\r\n      return new rgb(\r\n          parseInt(match[2]), \r\n          parseInt(match[3]),\r\n          parseInt(match[4]),\r\n          parseFloat(match[5] ?? 1)\r\n      );\r\n    }\r\n    public clone(): rgb{\r\n      return new rgb(this.r, this.g, this.b, this.a);\r\n    }\r\n  }\r\n  ","import { Plugin } from \"../Core/Plugin\";\r\nimport { PluginOrder } from \"../Core/PluginOrder\";\r\nimport { rgb } from \"../Helpers/Color\";\r\nimport { cli, cliPlugin, CommandResult } from \"../Helpers/Commands\";\r\n\r\n@cliPlugin(\"cli\")\r\nexport class CliPlugin extends Plugin {\r\n    public readonly order: PluginOrder = PluginOrder.None;\r\n    public name: string = \"CliPlugin\";\r\n    private globalCommands: Map<string, string | undefined> = new Map<string, string | undefined>();\r\n\r\n\r\n    @cli(\"echo\", \"<message: string>\", \"string\")\r\n    private echo(message: string): CommandResult {\r\n        return new CommandResult(true, message, message);\r\n    }\r\n    @cli(\"loop\", \"<iterations: int> <command: string>\", \"string\")\r\n    private loop(iters: number, command: string): CommandResult {\r\n        let ret = [];\r\n        let message = \"\";\r\n        for (let i = 0; i < iters; i++) {\r\n            const result = this.parseAndExecuteCommands(command);\r\n            if (!result.status) {\r\n                return new CommandResult(false, `Error executing command: ${result.message}`, undefined);\r\n            }\r\n            ret.push(result.data);\r\n            message += `${result.message}\\n`;\r\n        }\r\n        return new CommandResult(true, message, ret);\r\n    }\r\n    @cli(\"true\", undefined, \"bool\")\r\n    private true(): CommandResult {\r\n        const message = \"This is a true command\";\r\n        return new CommandResult(true, message, true);\r\n    }\r\n    @cli(\"false\", undefined, \"bool\")\r\n    private false(): CommandResult {\r\n        const message = \"This is a false command\";\r\n        return new CommandResult(true, message, false);\r\n    }\r\n    @cli(\"int\", \"<value: string>\", \"number\")\r\n    private int(value: string): CommandResult{\r\n        const message = `This is an int command with value ${value}`;\r\n        return new CommandResult(true, message, parseInt(value));\r\n    }\r\n    @cli(\"float\", \"<value: string>\", \"number\")\r\n    private float(value: string): CommandResult{\r\n        const message = `This is a float command with value ${value}`;\r\n        return new CommandResult(true, message, parseFloat(value));\r\n    }\r\n    @cli(\"refresh\")\r\n    private refresh(): CommandResult {\r\n        const message = \"This is a refresh command\";\r\n        location.reload();\r\n        return new CommandResult(true, message, undefined);\r\n    }\r\n    @cli(\"randomcolor\",undefined, \"rgb\")\r\n        private getrandomcolor(): CommandResult {\r\n        const randomColor = rgb.randomColor2();\r\n        return new CommandResult(true, `Random color is ${randomColor}`, randomColor);\r\n    }\r\n    @cli(\"help\")\r\n    protected override help(): CommandResult {\r\n        let superResult = super.help();\r\n\r\n        let message = `plugins:\\n`;\r\n        for (const plugin of this.gameWorld.getAllPlugins()) {\r\n            message += `/${(plugin as any).cliGetName()}\\n`;\r\n        }\r\n        message = superResult.message + \"\\n\" + message;\r\n        return new CommandResult(true, message, undefined);\r\n    }\r\n\r\n    @cli(\"art\")\r\n    protected art(): CommandResult {\r\n        \r\n        const asciiArt = `\r\n        \\x1b[31m██████╗░░█████╗░██████╗░███████╗\r\n        \\x1b[32m██╔══██╗██╔══██╗██╔══██╗╚════██║\r\n        \\x1b[33m██║░░██║██║░░██║██████╔╝░░░░██╔╝\r\n        \\x1b[34m██║░░██║██║░░██║██╔═══╝░░░░██╔╝░\r\n        \\x1b[35m██████╔╝╚█████╔╝██║░░░░░░░██║░░░\r\n        \\x1b[36m╚═════╝░░╚════╝░╚═╝░░░░░░░╚═╝░░░\\x1b[0m\r\n        `;\r\n        const ansiArt = `\r\n\\x1b[38;5;160m         ██████         \\x1b[0m\r\n\\x1b[38;5;160m       ██████████       \\x1b[0m\r\n\\x1b[38;5;160m      ████    ████      \\x1b[0m\r\n\\x1b[38;5;82m    ████        ████    \\x1b[0m\r\n\\x1b[38;5;82m   ████          ████   \\x1b[0m\r\n\\x1b[38;5;82m  ████            ████  \\x1b[0m\r\n\\x1b[38;5;82m  ████    ████    ████  \\x1b[0m\r\n\\x1b[38;5;82m  ████████████████████  \\x1b[0m\r\n\\x1b[38;5;226m   ██████████████████   \\x1b[0m\r\n\\x1b[38;5;226m     ████████████████     \\x1b[0m\r\n\\x1b[38;5;226m      ████    ██████      \\x1b[0m\r\n\\x1b[38;5;196m      ████    ██████      \\x1b[0m\r\n\\x1b[38;5;196m     ██████████████████     \\x1b[0m\r\n\\x1b[38;5;196m    ████████████████████    \\x1b[0m\r\n\\x1b[38;5;196m   ██████████████████████   \\x1b[0m\r\n\\x1b[38;5;196m  ████████████████████████  \\x1b[0m\r\n\\x1b[38;5;160m      ██████████████      \\x1b[0m\r\n\\x1b[38;5;160m       ████████████       \\x1b[0m\r\n        `;\r\n\r\n        console.log(ansiArt);\r\n\r\n        return new CommandResult(true, ansiArt, undefined);\r\n    }\r\n\r\n\r\n\r\n    public execute(command: string): CommandResult {\r\n        try{\r\n            return this.parseAndExecuteCommands(command);\r\n        }\r\n        catch {\r\n            return new CommandResult(false, \"Command execution failed\", undefined);\r\n        }\r\n    }\r\n\r\n    override start(): void {\r\n        this.gameWorld.getAllPlugins().forEach(plugin => {\r\n            const pluginName = plugin.constructor.name;\r\n            try{\r\n                for(let command of Object.keys((plugin as any).constructor[\"commands\"])){\r\n                    if (this.globalCommands.has(command)) \r\n                        this.globalCommands.set(command, undefined);\r\n                    else\r\n                    this.globalCommands.set(command, pluginName);\r\n                }\r\n            } catch {}\r\n        });\r\n    };\r\n\r\n    private parseAndExecuteCommands(input: string, depth: number = 0): CommandResult {\r\n        console.log((\"---\".repeat(depth))+\"Parsing: \"+input);\r\n        const args: any[] = [];\r\n        let current = '';\r\n        let inSingleQuote = false;\r\n        let inDoubleQuote = false;\r\n        let parenDepth = 0;\r\n    \r\n        input = input.trim();\r\n        for (let i = 0; i < input.length; i++) {\r\n            const char = input[i];\r\n            \r\n            if(parenDepth>0){\r\n                if(char === \"{\"){\r\n                    parenDepth++;\r\n                    current+= char;\r\n                    continue;\r\n                }\r\n                if(char === \"}\"){\r\n                    parenDepth--;\r\n                    if(parenDepth===0){\r\n                        const result = this.parseAndExecuteCommands(current, depth+1);\r\n                        // console.log(\"   \".repeat(depth)+result.message);\r\n                        args.push(result.data);\r\n                        current = '';\r\n                    }\r\n                    else\r\n                        current+=char;\r\n                    continue;\r\n                }\r\n                current += char;\r\n                continue;\r\n            }\r\n            \r\n            if (inDoubleQuote) {\r\n                if (char === \"\\\"\") {\r\n                    args.push(current);\r\n                    current = '';\r\n                    inDoubleQuote = false;\r\n                    continue;\r\n                }\r\n                current += char;\r\n                continue;\r\n            }\r\n            if (inSingleQuote) {\r\n                if (char === \"'\") {\r\n                    args.push(current);\r\n                    current = '';\r\n                    inSingleQuote = false;\r\n                    continue;\r\n                }\r\n                current += char;\r\n                continue;\r\n            }\r\n            if (char === \"\\\"\") {\r\n                inDoubleQuote = true;\r\n                continue;\r\n            }\r\n            if (char === \"'\") {\r\n                inSingleQuote = true;\r\n                continue;\r\n            }\r\n            if (char === \"{\") {\r\n                parenDepth++;\r\n                continue;\r\n            }\r\n            if (char === \" \") {\r\n                if (current.trim() !== \"\"){\r\n                    args.push(current);\r\n                    current = '';\r\n                }\r\n                continue;\r\n            }\r\n            current += char;\r\n        }\r\n        if (current.trim() !== \"\") {\r\n            args.push(current);\r\n        }\r\n        console.log(\"---\".repeat(depth)+\"Parsing result: \",args);\r\n        const fullCommand = args[0].split(':');\r\n        if (fullCommand.length === 2) {\r\n            const pluginName = fullCommand[0];\r\n            const plugin = this.gameWorld.getAllPlugins().find(p => (p as any).cliGetName() === pluginName);\r\n            if (!plugin)\r\n                return new CommandResult(false, `Plugin ${pluginName} not found`, undefined);\r\n            return this.executeParsedCommand(plugin, fullCommand[1], ...args.slice(1));\r\n        }\r\n        else if (fullCommand.length === 1) {\r\n            try{\r\n                if (!this.globalCommands.has(fullCommand[0]))\r\n                    return new CommandResult(false, `Command ${fullCommand[0]} not found`, undefined);\r\n                const pluginName = this.globalCommands.get(fullCommand[0]);\r\n                if (!pluginName)\r\n                    return new CommandResult(false, `More than one command found, use \"/<plugin>:<command>\" (fe /cli:help) instead.`, undefined);\r\n                const plugin = this.gameWorld.getPluginByName(pluginName);\r\n                return this.executeParsedCommand(plugin, fullCommand[0], ...args.slice(1));\r\n            }\r\n            catch{\r\n                return new CommandResult(false, \"Command not found or wrong syntax\", undefined);\r\n            }\r\n        }\r\n        else {\r\n            return new CommandResult(false, \"No command found\", undefined);\r\n        }\r\n    }\r\n    \r\n    private executeParsedCommand(plugin: Plugin, command: string, ...args: any[]): CommandResult {\r\n        if ((plugin as any).constructor[\"commands\"][command] === undefined) {\r\n            return new CommandResult(false, `Command ${command} not found`, undefined);\r\n        }\r\n        try {\r\n            let commandToApply = (plugin as any).constructor[\"commands\"][command];\r\n            let result: CommandResult = commandToApply.apply(plugin, args);\r\n            return result;\r\n        } catch { }\r\n        return new CommandResult(false, `Failed to execute command ${command} on ${(plugin as any).cliGetName()}`, undefined);\r\n    }\r\n}","import { RigidBodyC } from \"../Components/RigidBody\";\r\nimport { EventArgs, ISubscriber } from \"./GameEvent\";\r\nimport { GameObject } from \"./GameObject\";\r\nimport { GameWorld } from \"./GameWorld\";\r\nimport { Transform } from \"../Helpers/Transform\";\r\nimport { Plugin } from \"./Plugin\";\r\n\r\nexport abstract class Component implements ISubscriber {\r\n    private enabled: boolean = true;\r\n    private gameObject!: GameObject;\r\n    \r\n    //overideable methods\r\n    protected start(): void{ }\r\n    protected event(args: EventArgs, alias?: string): void{ }\r\n\r\n    \r\n    public getGameWorld(): GameWorld{\r\n        return this.gameObject.getGameWorld();\r\n    }\r\n    public hasComponent<T extends Component>(classC: new (...args: any[]) => T): boolean{\r\n        return this.gameObject.hasComponent(classC);\r\n    }\r\n    public getComponent<T extends Component>(classC: new (...args: any[]) => T): T{\r\n        return this.gameObject.getComponent(classC);\r\n    }\r\n    public getAllComponents(): Component[]{\r\n        return this.gameObject.getAllComponents();\r\n    }\r\n\r\n\r\n    public getTransform(): Transform{\r\n        return this.gameObject.getTransform();\r\n    }\r\n    public getGameObject(): GameObject{\r\n        return this.gameObject;\r\n    }\r\n    public getPlugin<T extends Plugin>(plugin: new (...args: any[]) => T): T{\r\n        return this.getGameWorld().getPlugin(plugin);\r\n    }\r\n    public isEnabled(): boolean{\r\n        return this.gameObject.enabled&&this.enabled;\r\n    }\r\n    public enable(value=true): void{\r\n        this.enabled=value;\r\n    }\r\n}","export class GMath{\r\n    public static symRand(value: number): number{\r\n        return (2*Math.random()-1)*value;\r\n    }\r\n    public static getColliderRadius(n: number, radius: number): number{\r\n        if(n>=10)\r\n            return radius;\r\n        const angle = Math.PI/n;\r\n        const h = Math.cos(angle)*radius;\r\n        return (2*h+radius)/3;\r\n    }\r\n    public static deltaAngle(a:number, b:number): number{\r\n        a = a%(2*Math.PI)+2*Math.PI\r\n        a = a%(2*Math.PI);\r\n        b = b%(2*Math.PI)+2*Math.PI\r\n        b = b%(2*Math.PI)+2*Math.PI;\r\n\r\n\r\n        return (b-a+Math.PI)%(2*Math.PI)-Math.PI;\r\n    }\r\n    public static elasticCollision1D(m1: number, v1: number, m2: number, v2: number): [number, number] {\r\n        const v1Final = ((v1 * (m1 - m2)) + (2 * m2 * v2)) / (m1 + m2);\r\n        const v2Final = ((v2 * (m2 - m1)) + (2 * m1 * v1)) / (m1 + m2);\r\n    \r\n        return [v1Final, v2Final];\r\n    }\r\n}","import { GMath } from \"./Math\";\r\n\r\nexport class Vector {\r\n    x : number = 0;\r\n    y : number = 0;\r\n    constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    //standard operators\r\n    add(a: Vector) : Vector{\r\n        return new Vector(this.x+a.x, this.y+a.y);\r\n    }\r\n    sub(a: Vector) : Vector{\r\n        return new Vector(this.x-a.x, this.y-a.y);\r\n    }\r\n    times(a: number) : Vector{\r\n        return new Vector(this.x*a, this.y*a);\r\n    }\r\n    timesV(other: Vector) : Vector{\r\n        return new Vector(this.x*other.x, this.y*other.y);\r\n    }\r\n\r\n    //other operators \r\n    distance(other: Vector){\r\n      return Math.sqrt(Math.pow(this.x-other.x, 2) + Math.pow(this.y-other.y, 2));\r\n    }\r\n    static distance(a: Vector, b: Vector){\r\n      return Math.sqrt(Math.pow(a.x-b.x, 2) + Math.pow(a.y-b.y, 2));\r\n    }\r\n    magnitude(){\r\n      return Math.sqrt(Math.pow(this.x, 2) + Math.pow(this.y, 2));\r\n    }\r\n    cross(): Vector{\r\n        return  new Vector(this.y, -this.x).toUnit();\r\n    }\r\n    scalarProduct(v: Vector): number{\r\n        return this.x*v.x+this.y*v.y;\r\n    }\r\n    vectorProduct(v: Vector): number{\r\n        return this.x*v.y-this.y*v.x;\r\n    }\r\n    perpendicular(n: Vector){\r\n        return this.sub(n.cross().times((n.scalarProduct(this))/(n.magnitude()*n.magnitude())));\r\n    }\r\n    toUnit(): Vector{\r\n      if(this.magnitude()!=0)\r\n        return new Vector(this.x, this.y).times(1/this.magnitude());\r\n      else return new Vector(1, 0);\r\n    }\r\n    setLength(length: number): Vector{\r\n        return this.toUnit().times(length);\r\n    }\r\n    toString(): string{\r\n        return \"{\"+this.x+\":\"+this.y+\"}\";\r\n    }\r\n    toRad(): number{\r\n        return Math.atan2(this.y, this.x); // Kąt w radianach\r\n    }\r\n    reverse(): Vector{\r\n        let sx=1e32;\r\n        let sy=1e32;\r\n        if(this.x!=0)\r\n            sx=1/this.x;\r\n        if(this.y!=0)\r\n            sy=1/this.y;\r\n        return new Vector(sx, sy);\r\n    }\r\n    interpolate(target: Vector, k: number): Vector{\r\n        const mx = target.sub(this);\r\n        const mv = mx.sub(mx.times( Math.min(1, Math.max(0, k)) ));\r\n        return this.add(mv);\r\n    }\r\n    static fromRad(rad: number){\r\n        return new Vector(\r\n            Math.cos(rad), \r\n            Math.sin(rad)\r\n        );\r\n    }\r\n    static randomPos(range: number): Vector{\r\n      return new Vector(GMath.symRand(range), GMath.symRand(range));\r\n    }\r\n    static randomPos2(range: number): Vector{\r\n        let angle = GMath.symRand(Math.PI);\r\n        let distance = Math.random()*range;\r\n        return Vector.fromRad(angle).times(distance);\r\n    }\r\n    clone(){\r\n        return new Vector(this.x, this.y);\r\n    }\r\n\r\n    //consts\r\n    public static zero(): Vector { return new Vector(0, 0) }\r\n    public static one(): Vector { return new Vector(1, 1) }\r\n    public static up(): Vector { return new Vector(0, 1) }\r\n    public static down(): Vector { return new Vector(0, -1) }\r\n    public static left(): Vector { return new Vector(-1, 0) }\r\n    public static right(): Vector { return new Vector(1, 0) }\r\n}   \r\n","import { Component } from \"../Core/Component\";\r\nimport { EventArgs, GameEvent } from \"../Core/GameEvent\";\r\nimport { GameObject } from \"../Core/GameObject\";\r\nimport { Vector } from \"../Helpers/Vector\";\r\n\r\n\r\nexport interface RBushItem {\r\n    colliderId: string;\r\n    minX: number;\r\n    minY: number;\r\n    maxX: number;\r\n    maxY: number;\r\n}\r\n\r\n\r\nexport class CollisionEventArgs extends EventArgs{\r\n    public collider: ColliderC;\r\n    constructor(collider: ColliderC) {\r\n        super();\r\n        this.collider = collider;\r\n    }\r\n}\r\n\r\nexport class ColliderC extends Component {\r\n    public offset: Vector = Vector.zero();\r\n    public radius: number;\r\n    public isActive: boolean = false;\r\n    public isStatic: boolean;\r\n    // public layer: number;\r\n    public avoidObjectes: WeakSet<GameObject>;\r\n    public collisions: Set<ColliderC> = new Set<ColliderC>();\r\n    public onCollisionEnterEvent: GameEvent = new GameEvent(); \r\n    public onCollisionExitEvent: GameEvent = new GameEvent(); \r\n\r\n\r\n    constructor(radius: number = 1, isStatic: boolean = true, ...avoidObjectes: GameObject[]){\r\n        super();\r\n        this.radius = radius;\r\n        this.isStatic = isStatic;\r\n        this.avoidObjectes = new Set();\r\n        avoidObjectes.forEach(ao => this.avoidObjectes.add(ao))\r\n    }\r\n\r\n    protected override start(): void {\r\n        this.onCollisionEnterEvent.register(this.getGameWorld());\r\n        this.onCollisionExitEvent.register(this.getGameWorld());\r\n    }\r\n\r\n    public getCenter(): Vector {\r\n        return this.getTransform().position.add(this.offset);\r\n    }\r\n\r\n    public getAABB(): RBushItem { \r\n        const center = this.getCenter();\r\n        return {\r\n            colliderId: this.getGameObject().getId(),\r\n            minX: center.x - this.radius,\r\n            minY: center.y - this.radius,\r\n            maxX: center.x + this.radius,\r\n            maxY: center.y + this.radius\r\n        };\r\n    }\r\n\r\n\r\n    public collides(other: ColliderC): boolean {\r\n        return ( (this.getCenter())\r\n        .sub(other.getCenter())\r\n        .magnitude() <= this.radius+other.radius )\r\n        && !this.avoidObjectes.has(other.getGameObject()) && !other.avoidObjectes.has(this.getGameObject());\r\n    }\r\n\r\n    public onCollisionEnter(other: ColliderC): void{\r\n        this.onCollisionEnterEvent.emit(new CollisionEventArgs(other));\r\n    }\r\n\r\n    public onCollisionExit(other: ColliderC): void{\r\n        this.onCollisionExitEvent.emit(new CollisionEventArgs(other));\r\n    }\r\n}","\nexport default class FlatQueue {\n\n    constructor() {\n        this.ids = [];\n        this.values = [];\n        this.length = 0;\n    }\n\n    clear() {\n        this.length = 0;\n    }\n\n    push(id, value) {\n        let pos = this.length++;\n\n        while (pos > 0) {\n            const parent = (pos - 1) >> 1;\n            const parentValue = this.values[parent];\n            if (value >= parentValue) break;\n            this.ids[pos] = this.ids[parent];\n            this.values[pos] = parentValue;\n            pos = parent;\n        }\n\n        this.ids[pos] = id;\n        this.values[pos] = value;\n    }\n\n    pop() {\n        if (this.length === 0) return undefined;\n\n        const top = this.ids[0];\n        this.length--;\n\n        if (this.length > 0) {\n            const id = this.ids[0] = this.ids[this.length];\n            const value = this.values[0] = this.values[this.length];\n            const halfLength = this.length >> 1;\n            let pos = 0;\n\n            while (pos < halfLength) {\n                let left = (pos << 1) + 1;\n                const right = left + 1;\n                let bestIndex = this.ids[left];\n                let bestValue = this.values[left];\n                const rightValue = this.values[right];\n\n                if (right < this.length && rightValue < bestValue) {\n                    left = right;\n                    bestIndex = this.ids[right];\n                    bestValue = rightValue;\n                }\n                if (bestValue >= value) break;\n\n                this.ids[pos] = bestIndex;\n                this.values[pos] = bestValue;\n                pos = left;\n            }\n\n            this.ids[pos] = id;\n            this.values[pos] = value;\n        }\n\n        return top;\n    }\n\n    peek() {\n        if (this.length === 0) return undefined;\n        return this.ids[0];\n    }\n\n    peekValue() {\n        if (this.length === 0) return undefined;\n        return this.values[0];\n    }\n\n    shrink() {\n        this.ids.length = this.values.length = this.length;\n    }\n}\n","import FlatQueue from 'flatqueue';\n\nconst ARRAY_TYPES = [Int8Array, Uint8Array, Uint8ClampedArray, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array];\nconst VERSION = 3; // serialized format version\n\n/** @typedef {Int8ArrayConstructor | Uint8ArrayConstructor | Uint8ClampedArrayConstructor | Int16ArrayConstructor | Uint16ArrayConstructor | Int32ArrayConstructor | Uint32ArrayConstructor | Float32ArrayConstructor | Float64ArrayConstructor} TypedArrayConstructor */\n\nexport default class Flatbush {\n\n    /**\n     * Recreate a Flatbush index from raw `ArrayBuffer` or `SharedArrayBuffer` data.\n     * @param {ArrayBuffer | SharedArrayBuffer} data\n     * @param {number} [byteOffset=0] byte offset to the start of the Flatbush buffer in the referenced ArrayBuffer.\n     * @returns {Flatbush} index\n     */\n    static from(data, byteOffset = 0) {\n        if (byteOffset % 8 !== 0) {\n            throw new Error('byteOffset must be 8-byte aligned.');\n        }\n\n        // @ts-expect-error duck typing array buffers\n        if (!data || data.byteLength === undefined || data.buffer) {\n            throw new Error('Data must be an instance of ArrayBuffer or SharedArrayBuffer.');\n        }\n\n        const [magic, versionAndType] = new Uint8Array(data, byteOffset + 0, 2);\n        if (magic !== 0xfb) {\n            throw new Error('Data does not appear to be in a Flatbush format.');\n        }\n        const version = versionAndType >> 4;\n        if (version !== VERSION) {\n            throw new Error(`Got v${version} data when expected v${VERSION}.`);\n        }\n        const ArrayType = ARRAY_TYPES[versionAndType & 0x0f];\n        if (!ArrayType) {\n            throw new Error('Unrecognized array type.');\n        }\n        const [nodeSize] = new Uint16Array(data, byteOffset + 2, 1);\n        const [numItems] = new Uint32Array(data, byteOffset + 4, 1);\n\n        return new Flatbush(numItems, nodeSize, ArrayType, undefined, data, byteOffset);\n    }\n\n    /**\n     * Create a Flatbush index that will hold a given number of items.\n     * @param {number} numItems\n     * @param {number} [nodeSize=16] Size of the tree node (16 by default).\n     * @param {TypedArrayConstructor} [ArrayType=Float64Array] The array type used for coordinates storage (`Float64Array` by default).\n     * @param {ArrayBufferConstructor | SharedArrayBufferConstructor} [ArrayBufferType=ArrayBuffer] The array buffer type used to store data (`ArrayBuffer` by default).\n     * @param {ArrayBuffer | SharedArrayBuffer} [data] (Only used internally)\n     * @param {number} [byteOffset=0] (Only used internally)\n     */\n    constructor(numItems, nodeSize = 16, ArrayType = Float64Array, ArrayBufferType = ArrayBuffer, data, byteOffset = 0) {\n        if (numItems === undefined) throw new Error('Missing required argument: numItems.');\n        if (isNaN(numItems) || numItems <= 0) throw new Error(`Unexpected numItems value: ${numItems}.`);\n\n        this.numItems = +numItems;\n        this.nodeSize = Math.min(Math.max(+nodeSize, 2), 65535);\n        this.byteOffset = byteOffset;\n\n        // calculate the total number of nodes in the R-tree to allocate space for\n        // and the index of each tree level (used in search later)\n        let n = numItems;\n        let numNodes = n;\n        this._levelBounds = [n * 4];\n        do {\n            n = Math.ceil(n / this.nodeSize);\n            numNodes += n;\n            this._levelBounds.push(numNodes * 4);\n        } while (n !== 1);\n\n        this.ArrayType = ArrayType;\n        this.IndexArrayType = numNodes < 16384 ? Uint16Array : Uint32Array;\n\n        const arrayTypeIndex = ARRAY_TYPES.indexOf(this.ArrayType);\n        const nodesByteSize = numNodes * 4 * this.ArrayType.BYTES_PER_ELEMENT;\n\n        if (arrayTypeIndex < 0) {\n            throw new Error(`Unexpected typed array class: ${ArrayType}.`);\n        }\n\n        // @ts-expect-error duck typing array buffers\n        if (data && data.byteLength !== undefined && !data.buffer) {\n            this.data = data;\n            this._boxes = new this.ArrayType(this.data, byteOffset + 8, numNodes * 4);\n            this._indices = new this.IndexArrayType(this.data, byteOffset + 8 + nodesByteSize, numNodes);\n\n            this._pos = numNodes * 4;\n            this.minX = this._boxes[this._pos - 4];\n            this.minY = this._boxes[this._pos - 3];\n            this.maxX = this._boxes[this._pos - 2];\n            this.maxY = this._boxes[this._pos - 1];\n\n        } else {\n            this.data = new ArrayBufferType(8 + nodesByteSize + numNodes * this.IndexArrayType.BYTES_PER_ELEMENT);\n            this._boxes = new this.ArrayType(this.data, 8, numNodes * 4);\n            this._indices = new this.IndexArrayType(this.data, 8 + nodesByteSize, numNodes);\n            this._pos = 0;\n            this.minX = Infinity;\n            this.minY = Infinity;\n            this.maxX = -Infinity;\n            this.maxY = -Infinity;\n\n            new Uint8Array(this.data, 0, 2).set([0xfb, (VERSION << 4) + arrayTypeIndex]);\n            new Uint16Array(this.data, 2, 1)[0] = nodeSize;\n            new Uint32Array(this.data, 4, 1)[0] = numItems;\n        }\n\n        // a priority queue for k-nearest-neighbors queries\n        /** @type FlatQueue<number> */\n        this._queue = new FlatQueue();\n    }\n\n    /**\n     * Add a given rectangle to the index.\n     * @param {number} minX\n     * @param {number} minY\n     * @param {number} maxX\n     * @param {number} maxY\n     * @returns {number} A zero-based, incremental number that represents the newly added rectangle.\n     */\n    add(minX, minY, maxX = minX, maxY = minY) {\n        const index = this._pos >> 2;\n        const boxes = this._boxes;\n        this._indices[index] = index;\n        boxes[this._pos++] = minX;\n        boxes[this._pos++] = minY;\n        boxes[this._pos++] = maxX;\n        boxes[this._pos++] = maxY;\n\n        if (minX < this.minX) this.minX = minX;\n        if (minY < this.minY) this.minY = minY;\n        if (maxX > this.maxX) this.maxX = maxX;\n        if (maxY > this.maxY) this.maxY = maxY;\n\n        return index;\n    }\n\n    /** Perform indexing of the added rectangles. */\n    finish() {\n        if (this._pos >> 2 !== this.numItems) {\n            throw new Error(`Added ${this._pos >> 2} items when expected ${this.numItems}.`);\n        }\n        const boxes = this._boxes;\n\n        if (this.numItems <= this.nodeSize) {\n            // only one node, skip sorting and just fill the root box\n            boxes[this._pos++] = this.minX;\n            boxes[this._pos++] = this.minY;\n            boxes[this._pos++] = this.maxX;\n            boxes[this._pos++] = this.maxY;\n            return;\n        }\n\n        const width = (this.maxX - this.minX) || 1;\n        const height = (this.maxY - this.minY) || 1;\n        const hilbertValues = new Uint32Array(this.numItems);\n        const hilbertMax = (1 << 16) - 1;\n\n        // map item centers into Hilbert coordinate space and calculate Hilbert values\n        for (let i = 0, pos = 0; i < this.numItems; i++) {\n            const minX = boxes[pos++];\n            const minY = boxes[pos++];\n            const maxX = boxes[pos++];\n            const maxY = boxes[pos++];\n            const x = Math.floor(hilbertMax * ((minX + maxX) / 2 - this.minX) / width);\n            const y = Math.floor(hilbertMax * ((minY + maxY) / 2 - this.minY) / height);\n            hilbertValues[i] = hilbert(x, y);\n        }\n\n        // sort items by their Hilbert value (for packing later)\n        sort(hilbertValues, boxes, this._indices, 0, this.numItems - 1, this.nodeSize);\n\n        // generate nodes at each tree level, bottom-up\n        for (let i = 0, pos = 0; i < this._levelBounds.length - 1; i++) {\n            const end = this._levelBounds[i];\n\n            // generate a parent node for each block of consecutive <nodeSize> nodes\n            while (pos < end) {\n                const nodeIndex = pos;\n\n                // calculate bbox for the new node\n                let nodeMinX = boxes[pos++];\n                let nodeMinY = boxes[pos++];\n                let nodeMaxX = boxes[pos++];\n                let nodeMaxY = boxes[pos++];\n                for (let j = 1; j < this.nodeSize && pos < end; j++) {\n                    nodeMinX = Math.min(nodeMinX, boxes[pos++]);\n                    nodeMinY = Math.min(nodeMinY, boxes[pos++]);\n                    nodeMaxX = Math.max(nodeMaxX, boxes[pos++]);\n                    nodeMaxY = Math.max(nodeMaxY, boxes[pos++]);\n                }\n\n                // add the new node to the tree data\n                this._indices[this._pos >> 2] = nodeIndex;\n                boxes[this._pos++] = nodeMinX;\n                boxes[this._pos++] = nodeMinY;\n                boxes[this._pos++] = nodeMaxX;\n                boxes[this._pos++] = nodeMaxY;\n            }\n        }\n    }\n\n    /**\n     * Search the index by a bounding box.\n     * @param {number} minX\n     * @param {number} minY\n     * @param {number} maxX\n     * @param {number} maxY\n     * @param {(index: number) => boolean} [filterFn] An optional function for filtering the results.\n     * @returns {number[]} An array of indices of items intersecting or touching the given bounding box.\n     */\n    search(minX, minY, maxX, maxY, filterFn) {\n        if (this._pos !== this._boxes.length) {\n            throw new Error('Data not yet indexed - call index.finish().');\n        }\n\n        /** @type number | undefined */\n        let nodeIndex = this._boxes.length - 4;\n        const queue = [];\n        const results = [];\n\n        while (nodeIndex !== undefined) {\n            // find the end index of the node\n            const end = Math.min(nodeIndex + this.nodeSize * 4, upperBound(nodeIndex, this._levelBounds));\n\n            // search through child nodes\n            for (let /** @type number */ pos = nodeIndex; pos < end; pos += 4) {\n                // check if node bbox intersects with query bbox\n                if (maxX < this._boxes[pos]) continue; // maxX < nodeMinX\n                if (maxY < this._boxes[pos + 1]) continue; // maxY < nodeMinY\n                if (minX > this._boxes[pos + 2]) continue; // minX > nodeMaxX\n                if (minY > this._boxes[pos + 3]) continue; // minY > nodeMaxY\n\n                const index = this._indices[pos >> 2] | 0;\n\n                if (nodeIndex >= this.numItems * 4) {\n                    queue.push(index); // node; add it to the search queue\n\n                } else if (filterFn === undefined || filterFn(index)) {\n                    results.push(index); // leaf item\n                }\n            }\n\n            nodeIndex = queue.pop();\n        }\n\n        return results;\n    }\n\n    /**\n     * Search items in order of distance from the given point.\n     * @param {number} x\n     * @param {number} y\n     * @param {number} [maxResults=Infinity]\n     * @param {number} [maxDistance=Infinity]\n     * @param {(index: number) => boolean} [filterFn] An optional function for filtering the results.\n     * @returns {number[]} An array of indices of items found.\n     */\n    neighbors(x, y, maxResults = Infinity, maxDistance = Infinity, filterFn) {\n        if (this._pos !== this._boxes.length) {\n            throw new Error('Data not yet indexed - call index.finish().');\n        }\n\n        /** @type number | undefined */\n        let nodeIndex = this._boxes.length - 4;\n        const q = this._queue;\n        const results = [];\n        const maxDistSquared = maxDistance * maxDistance;\n\n        outer: while (nodeIndex !== undefined) {\n            // find the end index of the node\n            const end = Math.min(nodeIndex + this.nodeSize * 4, upperBound(nodeIndex, this._levelBounds));\n\n            // add child nodes to the queue\n            for (let pos = nodeIndex; pos < end; pos += 4) {\n                const index = this._indices[pos >> 2] | 0;\n\n                const dx = axisDist(x, this._boxes[pos], this._boxes[pos + 2]);\n                const dy = axisDist(y, this._boxes[pos + 1], this._boxes[pos + 3]);\n                const dist = dx * dx + dy * dy;\n                if (dist > maxDistSquared) continue;\n\n                if (nodeIndex >= this.numItems * 4) {\n                    q.push(index << 1, dist); // node (use even id)\n\n                } else if (filterFn === undefined || filterFn(index)) {\n                    q.push((index << 1) + 1, dist); // leaf item (use odd id)\n                }\n            }\n\n            // pop items from the queue\n            // @ts-expect-error q.length check eliminates undefined values\n            while (q.length && (q.peek() & 1)) {\n                const dist = q.peekValue();\n                // @ts-expect-error\n                if (dist > maxDistSquared) break outer;\n                // @ts-expect-error\n                results.push(q.pop() >> 1);\n                if (results.length === maxResults) break outer;\n            }\n\n            // @ts-expect-error\n            nodeIndex = q.length ? q.pop() >> 1 : undefined;\n        }\n\n        q.clear();\n        return results;\n    }\n}\n\n/**\n * 1D distance from a value to a range.\n * @param {number} k\n * @param {number} min\n * @param {number} max\n */\nfunction axisDist(k, min, max) {\n    return k < min ? min - k : k <= max ? 0 : k - max;\n}\n\n/**\n * Binary search for the first value in the array bigger than the given.\n * @param {number} value\n * @param {number[]} arr\n */\nfunction upperBound(value, arr) {\n    let i = 0;\n    let j = arr.length - 1;\n    while (i < j) {\n        const m = (i + j) >> 1;\n        if (arr[m] > value) {\n            j = m;\n        } else {\n            i = m + 1;\n        }\n    }\n    return arr[i];\n}\n\n/**\n * Custom quicksort that partially sorts bbox data alongside the hilbert values.\n * @param {Uint32Array} values\n * @param {InstanceType<TypedArrayConstructor>} boxes\n * @param {Uint16Array | Uint32Array} indices\n * @param {number} left\n * @param {number} right\n * @param {number} nodeSize\n */\nfunction sort(values, boxes, indices, left, right, nodeSize) {\n    if (Math.floor(left / nodeSize) >= Math.floor(right / nodeSize)) return;\n\n    const pivot = values[(left + right) >> 1];\n    let i = left - 1;\n    let j = right + 1;\n\n    while (true) {\n        do i++; while (values[i] < pivot);\n        do j--; while (values[j] > pivot);\n        if (i >= j) break;\n        swap(values, boxes, indices, i, j);\n    }\n\n    sort(values, boxes, indices, left, j, nodeSize);\n    sort(values, boxes, indices, j + 1, right, nodeSize);\n}\n\n/**\n * Swap two values and two corresponding boxes.\n * @param {Uint32Array} values\n * @param {InstanceType<TypedArrayConstructor>} boxes\n * @param {Uint16Array | Uint32Array} indices\n * @param {number} i\n * @param {number} j\n */\nfunction swap(values, boxes, indices, i, j) {\n    const temp = values[i];\n    values[i] = values[j];\n    values[j] = temp;\n\n    const k = 4 * i;\n    const m = 4 * j;\n\n    const a = boxes[k];\n    const b = boxes[k + 1];\n    const c = boxes[k + 2];\n    const d = boxes[k + 3];\n    boxes[k] = boxes[m];\n    boxes[k + 1] = boxes[m + 1];\n    boxes[k + 2] = boxes[m + 2];\n    boxes[k + 3] = boxes[m + 3];\n    boxes[m] = a;\n    boxes[m + 1] = b;\n    boxes[m + 2] = c;\n    boxes[m + 3] = d;\n\n    const e = indices[i];\n    indices[i] = indices[j];\n    indices[j] = e;\n}\n\n/**\n * Fast Hilbert curve algorithm by http://threadlocalmutex.com/\n * Ported from C++ https://github.com/rawrunprotected/hilbert_curves (public domain)\n * @param {number} x\n * @param {number} y\n */\nfunction hilbert(x, y) {\n    let a = x ^ y;\n    let b = 0xFFFF ^ a;\n    let c = 0xFFFF ^ (x | y);\n    let d = x & (y ^ 0xFFFF);\n\n    let A = a | (b >> 1);\n    let B = (a >> 1) ^ a;\n    let C = ((c >> 1) ^ (b & (d >> 1))) ^ c;\n    let D = ((a & (c >> 1)) ^ (d >> 1)) ^ d;\n\n    a = A; b = B; c = C; d = D;\n    A = ((a & (a >> 2)) ^ (b & (b >> 2)));\n    B = ((a & (b >> 2)) ^ (b & ((a ^ b) >> 2)));\n    C ^= ((a & (c >> 2)) ^ (b & (d >> 2)));\n    D ^= ((b & (c >> 2)) ^ ((a ^ b) & (d >> 2)));\n\n    a = A; b = B; c = C; d = D;\n    A = ((a & (a >> 4)) ^ (b & (b >> 4)));\n    B = ((a & (b >> 4)) ^ (b & ((a ^ b) >> 4)));\n    C ^= ((a & (c >> 4)) ^ (b & (d >> 4)));\n    D ^= ((b & (c >> 4)) ^ ((a ^ b) & (d >> 4)));\n\n    a = A; b = B; c = C; d = D;\n    C ^= ((a & (c >> 8)) ^ (b & (d >> 8)));\n    D ^= ((b & (c >> 8)) ^ ((a ^ b) & (d >> 8)));\n\n    a = C ^ (C >> 1);\n    b = D ^ (D >> 1);\n\n    let i0 = x ^ y;\n    let i1 = b | (0xFFFF ^ (i0 | a));\n\n    i0 = (i0 | (i0 << 8)) & 0x00FF00FF;\n    i0 = (i0 | (i0 << 4)) & 0x0F0F0F0F;\n    i0 = (i0 | (i0 << 2)) & 0x33333333;\n    i0 = (i0 | (i0 << 1)) & 0x55555555;\n\n    i1 = (i1 | (i1 << 8)) & 0x00FF00FF;\n    i1 = (i1 | (i1 << 4)) & 0x0F0F0F0F;\n    i1 = (i1 | (i1 << 2)) & 0x33333333;\n    i1 = (i1 | (i1 << 1)) & 0x55555555;\n\n    return ((i1 << 1) | i0) >>> 0;\n}\n","import { ColliderC, RBushItem } from \"../Components/Collider\";\r\nimport { Vector } from \"../Helpers/Vector\";\r\nimport { Plugin } from \"../Core/Plugin\";\r\nimport Flatbush from \"flatbush\";\r\nimport { main } from \"../main\";\r\nimport { PluginOrder } from \"../Core/PluginOrder\";\r\n\r\nexport class CollisionDetectionPlugin extends Plugin {\r\n    public readonly order: PluginOrder = PluginOrder.Collision;\r\n    public name: string = \"CollisionDetectionPlugin\";\r\n    private data: RBushItem[] = [];\r\n    private tree!: Flatbush;\r\n\r\n    override update(): void {\r\n        this.checkCollisions();\r\n    }\r\n\r\n    \r\n    public overlapPoint(point: Vector): ColliderC[] { \r\n        // let colliders = this.getNearbyCircles(this.getCellKey(point));\r\n        const potentials = this.tree.search(point.x, point.y, point.x, point.y);\r\n        const colliders = potentials.map(c => this.gameWorld.getGameObject(this.data[c].colliderId)?.getComponent(ColliderC)!).filter(c => c.getCenter().sub(point).magnitude() < c.radius);\r\n        return colliders;\r\n    }\r\n\r\n    checkCollisions(): void {\r\n        let AllColliders = this.gameWorld.getComponents(ColliderC)\r\n        const length = AllColliders.length;\r\n        if (length === 0) {\r\n            this.tree = new Flatbush(1);\r\n            return;\r\n        }\r\n\r\n        this.tree = new Flatbush(length);\r\n        this.data = AllColliders.map(collider => collider.getAABB());\r\n\r\n        for (const mainCollider of AllColliders)\r\n            mainCollider.isActive = false;\r\n\r\n        for (const item of this.data) \r\n            this.tree.add(item.minX, item.minY, item.maxX, item.maxY);\r\n        this.tree.finish();\r\n\r\n        for (const mainCollider of AllColliders) {\r\n            if (mainCollider.isStatic)\r\n                continue; \r\n            let newCollisions = new Set<ColliderC>();\r\n            \r\n            const mainAABB = mainCollider.getAABB();\r\n            const potential = this.tree.search(mainAABB.minX, mainAABB.minY, mainAABB.maxX, mainAABB.maxY);\r\n\r\n            for (const item of potential) {\r\n                const otherCollider = this.gameWorld.getGameObject(this.data[item].colliderId)?.getComponent(ColliderC);\r\n                if (!otherCollider || mainCollider === otherCollider) \r\n                    continue;\r\n                \r\n                if (mainCollider.collides(otherCollider)) {\r\n                    mainCollider.isActive = true;\r\n                    otherCollider.isActive = true;\r\n                    newCollisions.add(otherCollider);\r\n                }\r\n                \r\n                for(let newC of newCollisions)\r\n                    if(!mainCollider.collisions.has(newC)) \r\n                        mainCollider.getComponent(ColliderC).onCollisionEnter(newC); \r\n                    \r\n                \r\n                mainCollider.collisions.clear();\r\n                mainCollider.collisions = newCollisions;\r\n            } \r\n        }\r\n    }\r\n}","import { rgb as rgb } from \"../Helpers/Color\";\r\nimport { Plugin } from \"../Core/Plugin\";\r\nimport { PluginOrder } from \"../Core/PluginOrder\";\r\n\r\nexport class ConfigPlugin extends Plugin{\r\n    public readonly order: PluginOrder = PluginOrder.Input;\r\n    public name: string = \"ConfigPlugin\";\r\n    private readonly config: Map<string, any> = new Map(\r\n        [\r\n            [\"bulletSize\", 0.75 as any],\r\n            // [\"displayColliders\", true as any],\r\n            [\"playerSize\", 2.5 as any],\r\n            [\"bulletColor\", new rgb(56, 57, 60) as any],\r\n            // [\"playerColor\", new Color(145, 125, 39) as any],\r\n            [\"playerColor\", new rgb(122, 111, 62) as any],\r\n            [\"playerColor\", new rgb(80, 37, 36) as any],\r\n            [\"playerColor\", new rgb(59, 94, 76) as any],\r\n            [\"playerColor\", new rgb(129, 49, 54) as any],\r\n            [\"playerColor\", new rgb(130, 111, 51) as any],\r\n        ]\r\n    );\r\n\r\n    public get(key: string): any{\r\n        if (!this.config.has(key))\r\n            return undefined;\r\n\r\n        return this.config.get(key);\r\n    }\r\n    public set(key: string, value: any): void{\r\n        this.config.set(key, value);\r\n    }\r\n}","import { Component } from \"../Core/Component\";\r\nimport { Vector } from \"../Helpers/Vector\";\r\n\r\nexport class RigidBodyC extends Component {\r\n    public velocity: Vector;\r\n    public acceleration: Vector = Vector.zero();\r\n    public mass: number = 1;\r\n    public dampingFactor: number;\r\n    public angularVelocity: number = 0;\r\n    public angularAcceleration: number = 0;\r\n    public angularDrag: number = 0.25;\r\n\r\n    constructor(mass: number, dampingFactor=0.45){\r\n        super();\r\n        const s=15;\r\n        this.velocity = new Vector(Math.random()*s*2-s, Math.random()*s*2-s);\r\n        this.dampingFactor = dampingFactor;\r\n        this.mass = mass;\r\n    }\r\n\r\n    public update(delta: number): void {\r\n        this.velocity = this.velocity.add(this.acceleration.times(delta));\r\n        this.velocity = this.velocity.times(Math.pow(this.dampingFactor, delta));\r\n        this.getTransform().position = this.getTransform().position.add(this.velocity.times(delta));\r\n        this.getTransform().position = this.getTransform().position.add(this.acceleration.times(delta*delta/2));\r\n      \r\n        this.angularVelocity = this.angularVelocity+this.angularAcceleration * delta;\r\n        this.angularVelocity = this.angularVelocity*Math.pow(this.angularDrag, delta);\r\n        this.getTransform().rotation += this.angularVelocity * delta;\r\n    }\r\n}","import { RigidBodyC } from \"../Components/RigidBody\";\r\nimport { Plugin } from \"../Core/Plugin\";\r\nimport { PluginOrder } from \"../Core/PluginOrder\";\r\n\r\nexport class PhysicsPlugin extends Plugin {\r\n    public readonly order: PluginOrder = PluginOrder.Physics;\r\n    public name: string = \"PhysicsPlugin\";\r\n   \r\n    public override update(delta: number): void {\r\n        const totalDelta: number = this.gameWorld.getWorldTime();\r\n        this.gameWorld.getComponents(RigidBodyC).forEach(rigidBody => rigidBody.update(delta));\r\n    }\r\n}","import { Plugin } from \"../Core/Plugin\";\r\nimport { PluginOrder } from \"../Core/PluginOrder\";\r\n\r\nexport interface IInvokable {\r\n    onInvoke(topic: string): void;\r\n}\r\n\r\ntype record = {\r\n    totalTime: number;\r\n    subscriber: WeakRef<IInvokable>; \r\n    topic: string;\r\n}\r\n\r\nexport class SchedulerPlugin extends Plugin {\r\n    public readonly order: PluginOrder = PluginOrder.Input;\r\n    public name: string = \"SchedulerPlugin\";\r\n    private schedule: record[] = [];\r\n\r\n    public addInvoke(subscriber: IInvokable, totalTime: number, topic: string){\r\n        let sub = new WeakRef<IInvokable>(subscriber);\r\n        this.schedule.push({totalTime, subscriber: sub, topic});\r\n        this.schedule.sort((a, b)=>b.totalTime-a.totalTime);\r\n    }\r\n\r\n    public override update(delta: number): void {\r\n        const totalDelta = this.gameWorld.getWorldTime();\r\n        if(this.schedule.length!=0)\r\n        while(this.schedule.length!=0&&this.schedule[this.schedule.length-1].totalTime<=totalDelta){\r\n            let last = this.schedule.pop()!;\r\n            last.subscriber.deref()?.onInvoke(last.topic);\r\n        }\r\n    }\r\n   \r\n}","import http from 'http';\r\nimport { Plugin } from \"../Core/Plugin\";\r\nimport { Server as SocketIOServer, Socket } from 'socket.io';\r\nimport { PluginOrder } from '../Core/PluginOrder';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { GameObject } from '../Core/GameObject';\r\n\r\n\r\n\r\nexport class ServerPlugin extends Plugin {\r\n  public readonly order: PluginOrder = PluginOrder.Input;\r\n  private io: SocketIOServer;\r\n  private server: http.Server;\r\n  private names: Map<string, string> = new Map(); \r\n  private mocks: Map<string, GameObject> = new Map();\r\n  \r\n\r\n  constructor() {\r\n    super();\r\n    this.server = http.createServer((req, res) => {\r\n      res.writeHead(200, { 'Content-Type': 'text/plain' });\r\n      res.end('Socket.IO server is running\\n');\r\n    });\r\n    this.io = new SocketIOServer(this.server, {\r\n      cors: {\r\n        origin: \"*\",\r\n        methods: [\"GET\", \"POST\"]\r\n      }}\r\n    );\r\n  }\r\n\r\n  onChatMessage(socket: Socket, author: string, message: string) { \r\n    console.log('Otrzymano wiadomość od ', author, ': ', message);\r\n    socket.broadcast.emit('chat_message', this.getName(socket), message);\r\n    socket.emit('response', `Odebrano wiadomość o tresci: ${message}`);\r\n  }\r\n\r\n  start() {\r\n    console.log('Uruchamianie serwera Socket.IO...');\r\n    this.server.listen(8001, () => console.log('Serwer działa na porcie 8001'));\r\n    this.io.on('connection', (socket) => this.onConnection(socket));\r\n  }\r\n\r\n  onConnection(socket: Socket): void {\r\n    // socket.broadcast.emit('chat_message', this.getName(socket), 'connected!');\r\n\r\n    socket.on('chat_message', (author: string, data: string) => this.onChatMessage(socket, author, data));\r\n    socket.on('disconnect', () => console.log('Połączenie zostało zakończone'));\r\n    socket.on('set_name', (name: string) => this.setName(socket, name));\r\n    socket.on('synchronize_go', (id: string, data: any) => this.synchronize(socket, id, data));\r\n  }\r\n\r\n\r\n  setName(socket: Socket, name: string): void {\r\n    this.names.set(socket.id, name);\r\n  }\r\n  getName(socket: Socket): string {\r\n    return this.names.get(socket.id) ?? socket.id;\r\n  }\r\n\r\n\r\n  synchronize(socket: Socket, id: string, data: any): void {\r\n    console.log(`Synchronizing ${id} with data:`, data);\r\n    // this.mocks.set(id, data);\r\n    socket.broadcast.emit('synchronize_go', id, data);\r\n  }\r\n}","import { Component } from \"../Core/Component\";\r\n\r\nexport abstract class StandaloneComponent extends Component {\r\n    private tickCount: number = 0;\r\n    private tick(delta: number): void {\r\n        if(this.tickCount == 0)\r\n            this.start();\r\n        else\r\n            this.update(delta);\r\n        this.tickCount ++;\r\n    }\r\n    protected start(): void {}; \r\n    protected update(delta: number): void {}; \r\n}","import { StandaloneComponent } from \"../Components/StandaloneComponent\";\r\nimport { Plugin } from \"../Core/Plugin\";\r\nimport { PluginOrder } from \"../Core/PluginOrder\";\r\n\r\nexport class StandaloneComponentPlugin extends Plugin {\r\n    public readonly order: PluginOrder = PluginOrder.Update;\r\n    public name: string = \"StandaloneComponentPlugin\";\r\n    override update(delta: number): void {\r\n        this.gameWorld.getAllComponents()\r\n        .filter(component => component instanceof StandaloneComponent)\r\n        .map(component => component as StandaloneComponent)\r\n        .forEach(component => (component as any).tick(delta));\r\n    }\r\n}","import { GameWorld } from \"../Core/GameWorld\";\r\nimport { CliPlugin } from \"../Plugins/CliPlugin\";\r\nimport { CollisionDetectionPlugin } from \"../Plugins/CollisionDetection\";\r\nimport { ConfigPlugin } from \"../Plugins/Config\";\r\nimport { PhysicsPlugin } from \"../Plugins/Physics\";\r\nimport { SchedulerPlugin } from \"../Plugins/Scheduler\";\r\nimport { ServerPlugin } from \"../Plugins/Server\";\r\nimport { StandaloneComponentPlugin } from \"../Plugins/StandaloneComponent\";\r\n\r\n\r\nlet lastTickTime: number = 0;\r\n\r\nasync function waitPrecise(ms: number, ltt: number) {\r\n  while (performance.now() - ltt < ms) {\r\n  }\r\n}\r\n\r\nexport async function main () {\r\n  const world: GameWorld = new GameWorld(\r\n    new ConfigPlugin(),\r\n    new CliPlugin(),\r\n    new SchedulerPlugin(),\r\n    new PhysicsPlugin(),\r\n    new CollisionDetectionPlugin(),\r\n    new StandaloneComponentPlugin(),\r\n    new ServerPlugin()\r\n  );\r\n  \r\n  \r\n\r\n  for(let i=0;;i++){\r\n    lastTickTime = performance.now();\r\n    if(i%500==0)\r\n      console.log(\"Tick: \" + i + \" at \" + performance.now().toFixed(2) + \"ms\");\r\n    await new Promise(resolve => setTimeout(resolve, 0)); \r\n    world.tick();    \r\n    await waitPrecise(20, lastTickTime); \r\n  }\r\n}\r\n\r\nmain();"],"names":["CommandResult","status","message","data","cli","name","argsSyntax","returnType","target","propertyKey","descriptor","originalMethod","ctor","cliPlugin","Plugin","args","alias","delta","plugin","value","element","GREEN","RESET","RED","__decorateClass","EventArgs","GameEvent","sub","gameWorld","derefSub","PluginOrder","KeyboardEventArgs","key","KeyboardPlugin","event","ProfilerPlugin","fps","now","values","len","mean","v","usage","max","html","i","GameWorld","plugins","a","b","gameObject","comp","id","onlyEnabled","go","classC","componentRef","component","start","eventRef","rgb","r","g","alpha","color","h","s","l","k","n","f","hue","saturation","lightness","tempElem","lastColor","computedColor","style","match","CliPlugin","iters","command","ret","result","randomColor","superResult","ansiArt","pluginName","input","depth","current","inSingleQuote","inDoubleQuote","parenDepth","char","fullCommand","p","Component","GMath","radius","angle","m1","v1","m2","v2","v1Final","v2Final","Vector","x","y","other","length","sx","sy","mx","mv","rad","range","distance","CollisionEventArgs","collider","ColliderC","isStatic","avoidObjectes","ao","center","FlatQueue","pos","parent","parentValue","top","halfLength","left","right","bestIndex","bestValue","rightValue","ARRAY_TYPES","VERSION","Flatbush","byteOffset","magic","versionAndType","version","ArrayType","nodeSize","numItems","ArrayBufferType","numNodes","arrayTypeIndex","nodesByteSize","minX","minY","maxX","maxY","index","boxes","width","height","hilbertValues","hilbertMax","hilbert","sort","end","nodeIndex","nodeMinX","nodeMinY","nodeMaxX","nodeMaxY","j","filterFn","queue","results","upperBound","maxResults","maxDistance","q","maxDistSquared","outer","dx","axisDist","dy","dist","min","arr","m","indices","pivot","swap","temp","e","c","d","A","B","C","D","i0","i1","CollisionDetectionPlugin","point","AllColliders","mainCollider","item","newCollisions","mainAABB","potential","otherCollider","newC","ConfigPlugin","RigidBodyC","mass","dampingFactor","PhysicsPlugin","rigidBody","SchedulerPlugin","subscriber","totalTime","topic","totalDelta","last","ServerPlugin","http","req","res","SocketIOServer","socket","author","StandaloneComponent","StandaloneComponentPlugin","lastTickTime","waitPrecise","ms","ltt","main","world","resolve"],"mappings":"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","x_google_ignoreList":[13,14]}